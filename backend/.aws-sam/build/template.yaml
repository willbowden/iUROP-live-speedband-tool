Transform: AWS::Serverless-2016-10-31
Parameters:
  TableAlreadyExists:
    Type: String
    AllowedValues:
    - true
    - false
    Default: false
  ResultsBucketAlreadyExists:
    Type: String
    AllowedValues:
    - true
    - false
    Default: false
Conditions:
  CreateTable:
    Fn::Equals:
    - Ref: TableAlreadyExists
    - false
  CreateResultsBucket:
    Fn::Equals:
    - Ref: ResultsBucketAlreadyExists
    - false
Resources:
  SpeedbandsAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: default
      Cors:
        AllowMethods: '''GET,POST'''
        AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
        AllowOrigin: '''*'''
  JobSchedulerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      - arn:aws:iam::aws:policy/AmazonEventBridgeFullAccess
  DataCollectionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      - arn:aws:iam::aws:policy/AmazonS3FullAccess
      - arn:aws:iam::aws:policy/AmazonEventBridgeFullAccess
  JobSchedulerLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.10
      CodeUri: JobSchedulerLambda
      Role:
        Fn::GetAtt:
        - JobSchedulerRole
        - Arn
      Events:
        CreateJob:
          Type: Api
          Properties:
            RestApiId:
              Ref: SpeedbandsAPI
            Path: /jobs/create
            Method: POST
      VpcConfig:
        SubnetIds:
        - subnet-03f22d08a04b1627f
        - subnet-0b036e4ef099f6e24
        - subnet-010c5679b46dbf897
        SecurityGroupIds:
        - sg-0c24ac90309044d8d
    Metadata:
      SamResourceId: JobSchedulerLambda
  JobCheckerLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.10
      CodeUri: JobCheckerLambda
      Role:
        Fn::GetAtt:
        - JobSchedulerRole
        - Arn
      Events:
        CheckJob:
          Type: Api
          Properties:
            RestApiId:
              Ref: SpeedbandsAPI
            Path: /jobs/check/{jobId}
            Method: GET
      VpcConfig:
        SubnetIds:
        - subnet-03f22d08a04b1627f
        - subnet-0b036e4ef099f6e24
        - subnet-010c5679b46dbf897
        SecurityGroupIds:
        - sg-0c24ac90309044d8d
    Metadata:
      SamResourceId: JobCheckerLambda
  DataCollectionLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.10
      CodeUri: DataCollectionLambda
      Role:
        Fn::GetAtt:
        - DataCollectionRole
        - Arn
      VpcConfig:
        SubnetIds:
        - subnet-03f22d08a04b1627f
        - subnet-0b036e4ef099f6e24
        - subnet-010c5679b46dbf897
        SecurityGroupIds:
        - sg-0c24ac90309044d8d
    Metadata:
      SamResourceId: DataCollectionLambda
  EventBridgeInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
        - DataCollectionLambda
        - Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/*
  DataCollectionJobs:
    Type: AWS::DynamoDB::Table
    Condition: CreateTable
    Properties:
      TableName: DataCollectionJobs
      AttributeDefinitions:
      - AttributeName: jobId
        AttributeType: S
      KeySchema:
      - AttributeName: jobId
        KeyType: HASH
      BillingMode: PAY_PER_REQUEST
    DeletionPolicy: Retain
  DataCollectionResultsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Condition: CreateResultsBucket
    Properties:
      BucketName: results
      LifecycleConfiguration:
        Rules:
        - Id: ExpireOldResults
          Status: Enabled
          ExpirationInDays: 30
