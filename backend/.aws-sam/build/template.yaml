Transform: AWS::Serverless-2016-10-31
Parameters:
  TableAlreadyExists:
    Type: String
    AllowedValues:
    - true
    - false
    Default: false
  ResultsBucketAlreadyExists:
    Type: String
    AllowedValues:
    - true
    - false
    Default: false
Conditions:
  CreateTable:
    Fn::Equals:
    - Ref: TableAlreadyExists
    - false
  CreateResultsBucket:
    Fn::Equals:
    - Ref: ResultsBucketAlreadyExists
    - false
Resources:
  JobSchedulerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      - arn:aws:iam::aws:policy/AmazonEventBridgeFullAccess
  DataCollectionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      - arn:aws:iam::aws:policy/AmazonS3FullAccess
      - arn:aws:iam::aws:policy/AmazonEventBridgeFullAccess
  GetUserJobsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonDynamoDBReadOnlyAccess
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
  GetUserJobsLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.10
      CodeUri: GetUserJobsLambda
      Role:
        Fn::GetAtt:
        - GetUserJobsRole
        - Arn
      VpcConfig:
        SubnetIds:
        - subnet-03f22d08a04b1627f
        - subnet-0b036e4ef099f6e24
        - subnet-010c5679b46dbf897
        SecurityGroupIds:
        - sg-0c24ac90309044d8d
    Metadata:
      SamResourceId: GetUserJobsLambda
  JobSchedulerLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.10
      CodeUri: JobSchedulerLambda
      Role:
        Fn::GetAtt:
        - JobSchedulerRole
        - Arn
      VpcConfig:
        SubnetIds:
        - subnet-03f22d08a04b1627f
        - subnet-0b036e4ef099f6e24
        - subnet-010c5679b46dbf897
        SecurityGroupIds:
        - sg-0c24ac90309044d8d
    Metadata:
      SamResourceId: JobSchedulerLambda
  JobCheckerLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.10
      CodeUri: JobCheckerLambda
      Role:
        Fn::GetAtt:
        - JobSchedulerRole
        - Arn
      VpcConfig:
        SubnetIds:
        - subnet-03f22d08a04b1627f
        - subnet-0b036e4ef099f6e24
        - subnet-010c5679b46dbf897
        SecurityGroupIds:
        - sg-0c24ac90309044d8d
    Metadata:
      SamResourceId: JobCheckerLambda
  DataCollectionLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.10
      CodeUri: DataCollectionLambda
      Role:
        Fn::GetAtt:
        - DataCollectionRole
        - Arn
      VpcConfig:
        SubnetIds:
        - subnet-03f22d08a04b1627f
        - subnet-0b036e4ef099f6e24
        - subnet-010c5679b46dbf897
        SecurityGroupIds:
        - sg-0c24ac90309044d8d
    Metadata:
      SamResourceId: DataCollectionLambda
  EventBridgeInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
        - DataCollectionLambda
        - Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/*
  DataCollectionJobs:
    Type: AWS::DynamoDB::Table
    Condition: CreateTable
    Properties:
      TableName: DataCollectionJobs
      AttributeDefinitions:
      - AttributeName: jobId
        AttributeType: S
      KeySchema:
      - AttributeName: jobId
        KeyType: HASH
      BillingMode: PAY_PER_REQUEST
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
  DataCollectionResultsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Condition: CreateResultsBucket
    Properties:
      BucketName:
        Fn::Sub: results-${AWS::AccountId}-${AWS::Region}
      LifecycleConfiguration:
        Rules:
        - Id: ExpireOldResults
          Status: Enabled
          ExpirationInDays: 30
  SpeedbandsAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: SpeedbandsAPI
  JobsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
        - SpeedbandsAPI
        - RootResourceId
      RestApiId:
        Ref: SpeedbandsAPI
      PathPart: jobs
  GetUserJobsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: JobsResource
      RestApiId:
        Ref: SpeedbandsAPI
      PathPart: get
  ScheduleJobResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: JobsResource
      RestApiId:
        Ref: SpeedbandsAPI
      PathPart: create
  CheckJobResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: JobsResource
      RestApiId:
        Ref: SpeedbandsAPI
      PathPart: check
  GetUserJobsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: AWS_IAM
      HttpMethod: GET
      ResourceId:
        Ref: GetUserJobsResource
      RestApiId:
        Ref: SpeedbandsAPI
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUserJobsLambda.Arn}/invocations
      MethodResponses:
      - StatusCode: '200'
      - StatusCode: '404'
  GetUserJobsOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: SpeedbandsAPI
      ResourceId:
        Ref: GetUserJobsResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
            method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''
            method.response.header.Access-Control-Allow-Origin: '''*'''
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: '200'
        ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
  ScheduleJobMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: AWS_IAM
      HttpMethod: GET
      ResourceId:
        Ref: ScheduleJobResource
      RestApiId:
        Ref: SpeedbandsAPI
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${JobSchedulerLambda.Arn}/invocations
      MethodResponses:
      - StatusCode: '200'
      - StatusCode: '400'
  ScheduleJobOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: SpeedbandsAPI
      ResourceId:
        Ref: ScheduleJobResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
            method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''
            method.response.header.Access-Control-Allow-Origin: '''*'''
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: '200'
        ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
  CheckJobMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: AWS_IAM
      HttpMethod: GET
      ResourceId:
        Ref: CheckJobResource
      RestApiId:
        Ref: SpeedbandsAPI
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${JobCheckerLambda.Arn}/invocations
      MethodResponses:
      - StatusCode: '200'
      - StatusCode: '400'
      - StatusCode: '404'
  CheckJobOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: SpeedbandsAPI
      ResourceId:
        Ref: CheckJobResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
            method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''
            method.response.header.Access-Control-Allow-Origin: '''*'''
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: '200'
        ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
  SpeedbandsAPIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
    - CheckJobMethod
    - CheckJobOptionsMethod
    - GetUserJobsMethod
    - GetUserJobsOptionsMethod
    - ScheduleJobMethod
    - ScheduleJobOptionsMethod
    Properties:
      RestApiId:
        Ref: SpeedbandsAPI
      StageName: default
