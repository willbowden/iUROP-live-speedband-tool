Transform: AWS::Serverless-2016-10-31

Parameters:
  TableAlreadyExists:
    Type: String
    AllowedValues:
      - true
      - false
    Default: false
  ResultsBucketAlreadyExists:
    Type: String
    AllowedValues:
      - true
      - false
    Default: false

Conditions:
  CreateTable: !Equals [!Ref TableAlreadyExists, false]
  CreateResultsBucket: !Equals [!Ref ResultsBucketAlreadyExists, false]

Resources:
  # Execution roles
  JobSchedulerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AmazonEventBridgeFullAccess
    
  DataCollectionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonEventBridgeFullAccess
  
  GetUserJobsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonDynamoDBReadOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  GetUserJobsLambda:
      Type: AWS::Serverless::Function
      Properties:
        Handler: lambda_function.lambda_handler
        Runtime: python3.10
        CodeUri: ./lambdas/getUserJobs/
        Role: !GetAtt GetUserJobsRole.Arn
        Events:
          GetUserJobs:
            Type: Api
            Properties:
              RestApiId:
                Ref: SpeedbandsAPI
              Path: /jobs/get
              Method: GET
              Auth:
                Authorizer: CognitoAuthorizer
        VpcConfig:
          SubnetIds:
            # REPLACE WITH YOUR OWN SUBNET IDS
            - subnet-03f22d08a04b1627f # lambda-subnet-point-to-nat-1
            - subnet-0b036e4ef099f6e24 # lambda-subnet-point-to-nat-2
            - subnet-010c5679b46dbf897 # lambda-subnet-point-to-nat-3
          SecurityGroupIds:
            # REPLACE WITH YOUR OWN SG ID(S)
            - sg-0c24ac90309044d8d # default security group

  JobSchedulerLambda:
      Type: AWS::Serverless::Function
      Properties:
        Handler: lambda_function.lambda_handler
        Runtime: python3.10
        CodeUri: ./lambdas/jobScheduler/
        Role: !GetAtt JobSchedulerRole.Arn
        Events:
          CreateJob:
            Type: Api
            Properties:
              RestApiId:
                Ref: SpeedbandsAPI
              Path: /jobs/create
              Method: POST
              Auth:
                Authorizer: CognitoAuthorizer
        VpcConfig:
          SubnetIds:
            # REPLACE WITH YOUR OWN SUBNET IDS
            - subnet-03f22d08a04b1627f # lambda-subnet-point-to-nat-1
            - subnet-0b036e4ef099f6e24 # lambda-subnet-point-to-nat-2
            - subnet-010c5679b46dbf897 # lambda-subnet-point-to-nat-3
          SecurityGroupIds:
            # REPLACE WITH YOUR OWN SG ID(S)
            - sg-0c24ac90309044d8d # default security group

  JobCheckerLambda:
      Type: AWS::Serverless::Function
      Properties:
        Handler: lambda_function.lambda_handler
        Runtime: python3.10
        CodeUri: ./lambdas/jobChecker/
        Role: !GetAtt JobSchedulerRole.Arn
        Events:
          CheckJob:
            Type: Api
            Properties:
              RestApiId:
                Ref: SpeedbandsAPI
              Path: /jobs/check/{jobId}
              Method: GET
              Auth:
                Authorizer: CognitoAuthorizer
        VpcConfig:
          SubnetIds:
            # REPLACE WITH YOUR OWN SUBNET IDS
            - subnet-03f22d08a04b1627f # lambda-subnet-point-to-nat-1
            - subnet-0b036e4ef099f6e24 # lambda-subnet-point-to-nat-2
            - subnet-010c5679b46dbf897 # lambda-subnet-point-to-nat-3
          SecurityGroupIds:
            # REPLACE WITH YOUR OWN SG ID(S)
            - sg-0c24ac90309044d8d # default security group

  DataCollectionLambda:
      Type: AWS::Serverless::Function
      Properties:
        Handler: lambda_function.lambda_handler
        Runtime: python3.10
        CodeUri: ./lambdas/dataCollection/
        Role: !GetAtt DataCollectionRole.Arn
        VpcConfig:
          SubnetIds:
            # REPLACE WITH YOUR OWN SUBNET IDS
            - subnet-03f22d08a04b1627f # lambda-subnet-point-to-nat-1
            - subnet-0b036e4ef099f6e24 # lambda-subnet-point-to-nat-2
            - subnet-010c5679b46dbf897 # lambda-subnet-point-to-nat-3
          SecurityGroupIds:
            # REPLACE WITH YOUR OWN SG ID(S)
            - sg-0c24ac90309044d8d # default security group
  
  # To allow EventBridge to invoke our Data Collection Lambda
  EventBridgeInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt DataCollectionLambda.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/*"

  # DynamoDB table
  DataCollectionJobs:
    Type: AWS::DynamoDB::Table
    Condition: CreateTable
    Properties:
      TableName: DataCollectionJobs
      AttributeDefinitions:
        - AttributeName: jobId
          AttributeType: S
      KeySchema:
        - AttributeName: jobId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
    DeletionPolicy: Retain

  # S3 bucket for job results
  DataCollectionResultsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Condition: CreateResultsBucket
    Properties:
      BucketName: !Sub "results-${AWS::AccountId}-${AWS::Region}"
      LifecycleConfiguration:
        Rules:
          - Id: ExpireOldResults
            Status: Enabled
            ExpirationInDays: 30
  
  SpeedbandsAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: default
      Cors:
        AllowOrigin: "'*'"
        AllowMethods: "'GET,POST'"
        AllowHeaders: "'Content-Type,Authorization,x-amz-security-token'"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: arn:aws:cognito-idp:ap-southeast-1:537124958292:userpool/ap-southeast-1_YkAjQ6uvu


  
